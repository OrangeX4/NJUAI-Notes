#import "../../../Typst/report-template.typ": *
#import "../../../Typst/typst-sympy-calculator.typ": *
#import "../../../Typst/tablex.typ": *

#set heading(numbering: Numbering.with(base: 2, "(1) (a)"))
#show math.equation.where(block: true): it => display(it)

// apply the template
#show: report.with(
    size: 15pt,
    subject: "多智能体", 
    title: "HW3", 
    date: "2023 年春季", 
    author: "201300035 方盛俊 人工智能学院",
    par-indent: false,
)


#let G = $mat(a, b; d, c)$
#let p = $(c - d) / (a - b + c - d)$
#let q = $(c - b) / (a - b + c - d)$
#let V = $(a c - b d) / (a - b + c - d)$

= 课后作业 5-1

==

$ G_1 = mat(a, b; d, c) = mat(0, 3; 2, -1) $

$ p = (c - d) / (a - b + c - d) = 1/2 $

$ q = (c - b) / (a - b + c - d) = 2/3 $

Agent I 的最优策略为 $ (1/2, 1/2) $

Agent II 的最优策略为 $ (2/3, 1/3) $

$ V_1 = (a c - b d) / (a - b + c - d) = 1 $

==

$ G_2 = mat(a, b; d, c) = mat(0, 1; 4, 3) $

$ p = (c - d) / (a - b + c - d) = 1/2 $

$ q = (c - b) / (a - b + c - d) = -1 $

因此存在纯策略的纳什均衡解，对应的 $p = 0, q = 0$

Agent I 的最优策略为 $ (0, 1) $

Agent II 的最优策略为 $ (0, 1) $

$ V_2 = 3 $


==

$ G = mat(a, b; d, c) = mat(V_1, 4; 5, V_2) = mat(1, 4; 5, 3) $

$ p = (c - d) / (a - b + c - d) = 2/5 $

$ q = (c - b) / (a - b + c - d) = 1/5 $

Agent I 的最优策略为 $ (2/5, 3/5) $

Agent II 的最优策略为 $ (1/5, 4/5) $

$ V = (a c - b d) / (a - b + c - d) = (V_1 V_2 - 20) / (V_1 + V_2 - 9) = 17/5 $



= 课后作业 5-2

==

$ cases(V_1 = (V_2 V_3) / (V_2 + V_3), V_2 = (-1) / (V_1 - 2), V_3 = (-4) / (V_1 - 4)) => cases(V_1 = 2/5, V_2 = 5/8, V_3 = 10/9) $

所以有

$ G_1 = mat(5/8, 0; 0, 10/9), G_2 = mat(2/5, 1; 1, 0), G_3 = mat(2/5, 2; 2, 0) $

对于 $G_1$ 博弈有:

$ p = (c - d) / (a - b + c - d) = 16/25 $

$ q = (c - b) / (a - b + c - d) = 16/25 $

Agent I 的最优策略为 $ (16/25, 9/25) $

Agent II 的最优策略为 $ (16/25, 9/25) $

对于 $G_2$ 博弈有:

$ p = (c - d) / (a - b + c - d) = 5/8 $

$ q = (c - b) / (a - b + c - d) = 5/8 $

Agent I 的最优策略为 $ (5/8, 3/8) $

Agent II 的最优策略为 $ (5/8, 3/8) $

对于 $G_3$ 博弈有:

$ p = (c - d) / (a - b + c - d) = 5/9 $

$ q = (c - b) / (a - b + c - d) = 5/9 $

Agent I 的最优策略为 $ (5/9, 4/9) $

Agent II 的最优策略为 $ (5/9, 4/9) $



= 课后作业 5-3

$ V = (a c - b d) / (a - b + c - d) = (4 + 8/3 V) / (4 + 1/3 V) $

$ V = 2 $

$ G = mat(a, b; d, c) = mat(4, 5/3; 0, 7/3) $

$ p = (c - d) / (a - b + c - d) = 1/2 $

$ q = (c - b) / (a - b + c - d) = 1/7 $

Agent I 的最优策略为 $ (1/2, 1/2) $

Agent II 的最优策略为 $ (1/7, 6/7) $



= 课后作业 5-4

// #let a = $2$
// #let b = $2 + 1/2 V_2$
// #let c = $4 + 1/2 V_2$
// #let d = $0$
// ----------------------
// #let a = $-4$
// #let b = $0$
// #let c = $-4 + 1/2 V_1$
// #let d = $-2 + 1/2 V_1$
// ----------------------
// #let V_1 = $16/11$
// #let V_2 = $-24/11$

==

$ cases(V_1 = (a c - b d) / (a - b + c - d) = 1/4 V_2 + 2, V_2 = (a c - b d) / (a - b + c - d) = 1/3 V_1 - 8/3) => cases(V_1 = 16/11, V_2 = -24/11) $

==

对于 $G_1$ 博弈有:

$ p = (c - d) / (a - b + c - d) = 1/8 V_2 + 1 = 8/11 $

$ q = (c - b) / (a - b + c - d) = 1/2 $

Agent I 的最优策略为 $ (8/11, 3/11) $

Agent II 的最优策略为 $ (1/2, 1/2) $

对于 $G_2$ 博弈有:

$ p = (c - d) / (a - b + c - d) = 1/3 $

$ q = (c - b) / (a - b + c - d) = 2/3 - 1/12 V_1 = 6/11 $

Agent I 的最优策略为 $ (1/3, 2/3) $

Agent II 的最优策略为 $ (6/11, 5/11) $

==

#let Val(..args) = $#math.op("Val")#math.mat(..args)$
#let Val1(v1, v2) = $Val(2, 2 + 0.5 times v2; 0, 4 + 0.5 times v2)$
#let Val2(v1, v2) = $Val(-4, 0; -2 + 0.5 times v1, -4 + 0.5 times v1)$

```typst-calculator
@func_mat()
def convert_Val(mat):
    a, b, c, d = mat[0][0], mat[0][1], mat[1][1], mat[1][0]
    return (a * c - b * d) / (a - b + c - d)

@func()
def convert_Val1(v1, v2):
    mat = [[2, 2 + 0.5 * v2], [0, 4 + 0.5 * v2]]
    a, b, c, d = mat[0][0], mat[0][1], mat[1][1], mat[1][0]
    return (a * c - b * d) / (a - b + c - d)

@func()
def convert_Val2(v1, v2):
    mat = [[-4, 0], [-2 + 0.5 * v1, -4 + 0.5 * v1]]
    a, b, c, d = mat[0][0], mat[0][1], mat[1][1], mat[1][0]
    return (a * c - b * d) / (a - b + c - d)
```

$ V_0 = (0, 0) $

$ V_1(1) = Val1(0, 0) = 2 $

$ V_1(2) = Val2(0, 0) = -2.66666666666667 $

$ V_1 = (2, -2.66666666666667) $

$ V_2(1) = Val1(2, -2.66666666666667) = 1.33333333333333 $

$ V_2(2) = Val2(2, -2.66666666666667) = -2.00000000000000 $

$ V_2 = (1.33333333333333, -2.00000000000000) $

$ V_3(1) = Val1(1.33333333333333, -2.00000000000000) = 1.50000000000000 $

$ V_3(2) = Val2(1.33333333333333, -2.00000000000000) \ = -2.22222222222222 $

$ V_3 = (1.50000000000000, -2.22222222222222) $

$ V_4(1) = Val1(1.50000000000000, -2.22222222222222) = 1.44444444444445 $

$ V_4(2) = Val2(1.50000000000000, -2.22222222222222) \ = -2.16666666666667 $

$ V_4 = (1.44444444444445, -2.16666666666667) $

$ V_5(1) = Val1(1.44444444444445, -2.16666666666667) = 1.45833333333333 $

$ V_5(2) = Val2(1.44444444444445, -2.16666666666667) \ = -2.18518518518518 $

$ V_5 = (1.45833333333333, -2.18518518518518) $

$ V_6(1) = Val1(1.45833333333333, -2.18518518518518) = 1.45370370370371 $

$ V_6(2) = Val2(1.45833333333333, -2.18518518518518) \ = -2.18055555555556 $

$ V_6 = (1.45370370370371, -2.18055555555556) $

$ V_7(1) = Val1(1.45370370370371, -2.18055555555556) = 1.45486111111111 $

$ V_7(2) = Val2(1.45370370370371, -2.18055555555556) \ = -2.18209876543210 $

$ V_7 = (1.45486111111111, -2.18209876543210) $